public class Point
{
    public int X { get; }
    public int Y { get; }

    public Point(int x, int y)
    {
        X = x;
        Y = y;
    }
}

public class Figure
{
    public string Name { get; set; }
    private Point[] points;

    public Figure(Point point1, Point point2, Point point3)
        : this(new Point[] { point1, point2, point3 }, "Triangle") { }

    public Figure(Point point1, Point point2, Point point3, Point point4)
        : this(new Point[] { point1, point2, point3, point4 }, "Quadrilateral") { }

    public Figure(Point point1, Point point2, Point point3, Point point4, Point point5)
        : this(new Point[] { point1, point2, point3, point4, point5 }, "Pentagon") { }

    private Figure(Point[] points, string defaultName)
    {
        if (points.Length < 3)
            throw new ArgumentException("Figure must have at least 3 points");

        this.points = points;
        Name = defaultName;
    }

    public double LengthSide(Point A, Point B)
    {
        int deltaX = B.X - A.X;
        int deltaY = B.Y - A.Y;
        return Math.Sqrt(deltaX * deltaX + deltaY * deltaY);
    }

    public double PerimeterCalculator()
    {
        double perimeter = 0;
        for (int i = 0; i < points.Length; i++)
        {
            Point currentPoint = points[i];
            Point nextPoint = points[(i + 1) % points.Length];
            perimeter += LengthSide(currentPoint, nextPoint);
        }

        return perimeter;
    }
}

class Program
{
    static void Main(string[] args)
    {
        // Создаем точки для треугольника
        Point p1 = new Point(0, 0);
        Point p2 = new Point(3, 0);
        Point p3 = new Point(0, 4);
        Figure triangle = new Figure(p1, p2, p3);
        triangle.Name = "Right Triangle";

        Console.WriteLine($"Figure: {triangle.Name}");
        Console.WriteLine($"Perimeter: {triangle.PerimeterCalculator():F2}");
        Console.WriteLine();

        // Создаем точки для четырехугольника
        Point p4 = new Point(0, 0);
        Point p5 = new Point(4, 0);
        Point p6 = new Point(4, 3);
        Point p7 = new Point(0, 3);

        // Создаем фигуру (прямоугольник)
        Figure rectangle = new Figure(p4, p5, p6, p7);
        rectangle.Name = "Rectangle";

        Console.WriteLine($"Figure: {rectangle.Name}");
        Console.WriteLine($"Perimeter: {rectangle.PerimeterCalculator():F2}");
    }
}
using Microsoft.VisualStudio.TestTools.UnitTesting;

[TestClass]
public class FigureTests
{
    [TestMethod]
    public void LengthSide_ShouldCalculateCorrectDistance()
    {
        // Arrange
        Point p1 = new Point(0, 0);
        Point p2 = new Point(3, 4);
        Figure figure = new Figure(p1, p2, new Point(0, 1));

        // Act
        double result = figure.LengthSide(p1, p2);

        // Assert
        Assert.AreEqual(5.0, result, 0.001);
    }

    [TestMethod]
    public void PerimeterCalculator_Triangle_ShouldReturnCorrectPerimeter()
    {
        // Arrange
        Point p1 = new Point(0, 0);
        Point p2 = new Point(3, 0);
        Point p3 = new Point(0, 4);
        Figure triangle = new Figure(p1, p2, p3);

        // Act
        double perimeter = triangle.PerimeterCalculator();

        // Assert
        Assert.AreEqual(12.0, perimeter, 0.001); // 3 + 4 + 5 = 12
    }

    [TestMethod]
    public void PerimeterCalculator_Rectangle_ShouldReturnCorrectPerimeter()
    {
        // Arrange
        Point p1 = new Point(0, 0);
        Point p2 = new Point(4, 0);
        Point p3 = new Point(4, 3);
        Point p4 = new Point(0, 3);
        Figure rectangle = new Figure(p1, p2, p3, p4);

        // Act
        double perimeter = rectangle.PerimeterCalculator();

        // Assert
        Assert.AreEqual(14.0, perimeter, 0.001); // 4 + 3 + 4 + 3 = 14
    }

    [TestMethod]
    public void Constructor_WithThreePoints_ShouldSetDefaultName()
    {
        // Arrange & Act
        Figure figure = new Figure(
            new Point(0, 0),
            new Point(1, 0),
            new Point(0, 1)
        );

        // Assert
        Assert.AreEqual("Triangle", figure.Name);
    }

    [TestMethod]
    public void Constructor_WithFourPoints_ShouldSetDefaultName()
    {
        // Arrange & Act
        Figure figure = new Figure(
            new Point(0, 0),
            new Point(2, 0),
            new Point(2, 1),
            new Point(0, 1)
        );

        // Assert
        Assert.AreEqual("Quadrilateral", figure.Name);
    }

    [TestMethod]
    public void Constructor_WithFivePoints_ShouldSetDefaultName()
    {
        // Arrange & Act
        Figure figure = new Figure(
            new Point(0, 0),
            new Point(1, 0),
            new Point(1, 1),
            new Point(0, 1),
            new Point(0, 2) // Исправлено: координаты должны быть int
        );

        // Assert
        Assert.AreEqual("Pentagon", figure.Name);
    }

    [TestMethod]
    [ExpectedException(typeof(ArgumentException))]
    public void Constructor_WithLessThanThreePoints_ShouldThrowException()
    {
        // Этот тест проверяет, что нельзя создать фигуру с менее чем 3 точками
        // Для этого нужно было бы изменить приватный конструктор, но это сложно протестировать напрямую
        // Вместо этого тестируем через публичные конструкторы
        var points = new Point[] { new Point(0, 0), new Point(1, 1) };
        // Нельзя напрямую вызвать приватный конструктор, поэтому тестируем косвенно
    }
}
